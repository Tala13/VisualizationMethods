library(ggenealogy)
help(plotClusters)
??plotClusters
library(grid)
library(matrixStats)
library(ggplot2)
data(soybean_ir_sub)
soybean_ir_sub[,-1] <- log(soybean_ir_sub[-1]+1)
data(soybean_ir_sub_metrics)
colList = c("#00A600FF", rainbow(5)[c(1,4,5)])
ret <- plotClusters(data=soybean_ir_sub,
dataMetrics = soybean_ir_sub_metrics, nC=4, colList = colList,
clusterAllData = FALSE, threshVal = 1e-7, saveFile = FALSE)
grid.draw(ret[["N_P_4"]])
colList
ret <- plotClusters(data=soybean_ir_sub,
+                     dataMetrics = soybean_ir_sub_metrics, nC=4, colList = colList,
+                     clusterAllData = FALSE, threshVal = 1e-7, saveFile = FALSE)
ret <- plotClusters(data=soybean_ir_sub, dataMetrics = soybean_ir_sub_metrics, nC=4, colList = colList, clusterAllData = FALSE, threshVal = 1e-7, saveFile = FALSE)
library(bigPint)
ret <- plotClusters(data=soybean_ir_sub, dataMetrics = soybean_ir_sub_metrics, nC=4, colList = colList, clusterAllData = FALSE, threshVal = 1e-7, saveFile = FALSE)
grid.draw(ret[["N_P_4"]])
grid.draw(ret[[1]])
dev.off()
grid.draw(ret[[1]])
grid.draw(ret[[2]])
??plotClusters
setwd("~/VisualizationMethods/Figures")
source("../functions.R")
load("../data/soybean_ir.rda")
data <- soybean_ir
load("../data/soybean_ir_noFilt_metrics.rda")
metrics <- soybean_ir_noFilt_metrics[["N_P"]]
# Filter, normalize, and standardize the data so each gene has mean=0 and stdev=1
res <- filterStandardizeSB(data)
# Fitered data standardized
filts <- res[["filts"]]
# Non-filtered data standardized
datas <- res[["datas"]]
# Hierarchical clustering object
hc <- res[["hc"]]
# Full data standardized
fulls <- rbind(datas, filts)
fulls <- fulls[,c(7,1:6)]
metrics <- list(metrics)
names(metrics) <- "N_P"
nC=4
colList = scales::hue_pal()(nC+1)
colList <- colList[c(3, 2, 5, 1)]
datas <- datas[,c(7,1:6)]
metricUnList = metrics[["N_P"]]
geneList = metricUnList[which(metricUnList$FDR < 0.05), ]$ID
fullGL = fulls[fulls$ID %in% geneList,]
whichmet <- which(metrics[["N_P"]]$ID %in% datas$ID)
whichdat <- which(datas$ID %in% metrics[["N_P"]]$ID)
metrics[["N_P"]] <- metrics[["N_P"]][whichmet, ]
datas <- datas[whichdat, ]
str(datas)
str(fullGL)
str(fulls)
dev.off()
setwd("~/VisualizationMethods/AdditionalFiles")
rm(list=ls())
library(rtracklayer)
library(Rsamtools)
library(grid)
library(GenomicAlignments)
library(ggplot2)
library(GGally)
library(edgeR)
library(stringr)
library(EDASeq)
library(dplyr)
library(matrixStats)
library(gridExtra)
library(reshape2)
library(scales)
library(bigPint)
library(data.table)
source("../functions.R")
# Get data
load("../data/LK_data.RData")
data = as.data.frame(MA.subsetA$M)
rownames(data) = as.character(MA.subsetA$genes$EnsemblGeneID)
setDT(data, keep.rownames = TRUE)[]
colnames(data) = c("ID","K.R1L1","L.R1L2","K.R1L3","L.R1L4","L.R1L6","K.R1L7","L.R1L8","K.R2L2","L.R2L3","K.R2L6")
data = as.data.frame(data)
data = data[,c(1,2,4,7,9,11,3,5,6,8,10)]
# Obtain R1 values
data <- data[,c(1:4,7:9)]
colnames(data) <- c("ID", "K.1", "K.2", "K.3", "L.1", "L.2", "L.3")
logSoy = data
logSoy[,-1] <- log(data[,-1]+1)
# Get raw data metrics
rowNames = data[,1]
dataSel = data[,-1]
rownames(dataSel) = rowNames
group <- factor(c(1,1,1,2,2,2))
y <- DGEList(counts=dataSel,group=group)
design <- model.matrix(~group)
y <- estimateDisp(y, design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
ret = data.frame(ID=rownames(topTags(lrt, n = nrow(y[[1]]))[[1]]), topTags(lrt, n = nrow(y[[1]]))[[1]])
ret$ID = as.character(ret$ID)
ret = as.data.frame(ret)
metricList = list()
metricList[["K_L"]] = ret
metrics <- metricList[["K_L"]]
sigMets = metrics[which(metrics$FDR<0.001),]
sigK_Raw <- sigMets[which(sigMets$logFC<0),]
sigL_Raw <- sigMets[which(sigMets$logFC>0),]
# Get TMM data metrics
rowNames = data[,1]
dataSel = data[,-1]
rownames(dataSel) = rowNames
group <- factor(c(1,1,1,2,2,2))
y <- DGEList(counts=dataSel,group=group)
y <- calcNormFactors(y)
design <- model.matrix(~group)
y <- estimateDisp(y, design)
fit <- glmFit(y,design)
lrt <- glmLRT(fit,coef=2)
ret = data.frame(ID=rownames(topTags(lrt, n = nrow(y[[1]]))[[1]]), topTags(lrt, n = nrow(y[[1]]))[[1]])
ret$ID = as.character(ret$ID)
ret = as.data.frame(ret)
metricList = list()
metricList[["K_L"]] = ret
metrics <- metricList[["K_L"]]
sigMets = metrics[which(metrics$FDR<0.001),]
sigK_TMM <- sigMets[which(sigMets$logFC<0),]
sigL_TMM <- sigMets[which(sigMets$logFC>0),]
keepDEG <- sigK_TMM
# Filter, normalize, and standardize the data so each gene has mean=0 and stdev=1
res <- filterStandardizeKL(data)
# Fitered data standardized
fulls <- res[["fulls"]]
# Non-filtered data standardized
datas <- res[["datas"]]
# Combine the filtered and remaining data
fulls <- datas
boxDat <- melt(fulls, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
# Indices of the NAN rows
nID <- which(is.nan(datas$K.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:6] <- 0
yMin = min(datas[,1:6])
yMax = max(datas[,1:6])
x = as.data.frame(datas[which(datas$ID %in% keepDEG$ID),])
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xSig = x
xSigNames = rownames(xSig)
nGenes = nrow(xSig)
dendo = xSig[,1:6]
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
# Number of clusters
nC = 8
# Cluster number
j=1
colList = scales::seq_gradient_pal("purple", "purple4", "Lab")(seq(0,1,length.out=nC))
k = cutree(hc, k=nC)
i = rev(order(table(k)))[j]
x = as.data.frame(xSig[,1:6][which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
x$ID = xNames
xSigNames = rownames(x)
scatMatMetrics = list()
scatMatMetrics[["K_L"]] = metrics[which(metrics$ID %in% x$ID),]
scatMatMetrics[["K_L"]]$FDR = 10e-10
scatMatMetrics[["K_L"]]$ID = as.factor(as.character(scatMatMetrics[["K_L"]]$ID))
ret <- plotSM(data = logSoy, dataMetrics = scatMatMetrics, threshVar = "FDR", threshVal = 0.05, pointColor = colList[j], saveFile = FALSE)
ret[["K_L"]] + xlab("Logged Count") + ylab("Logged Count") + ggtitle(paste("Cluster ", j, " Significant Added Genes (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + theme(plot.title = element_text(hjust = 0.5, size=14), axis.text=element_text(size=14), axis.title=element_text(size=18), strip.text = element_text(size = 14))
str(scatMatMetrics)
scatMatMetrics[["K_L"]]$ID <- as.character(scatMatMetrics[["K_L"]]$ID)
ret <- plotSM(data = logSoy, dataMetrics = scatMatMetrics, threshVar = "FDR", threshVal = 0.05, pointColor = colList[j], saveFile = FALSE)
str(logSoy)
str(scatMatMetrics)
ret <- plotSM(data = logSoy, dataMetrics = scatMatMetrics, threshVar = "FDR", threshVal = 0.05, pointColor = colList[j], saveFile = FALSE)
str(scatMatMetrics)
rm(list=ls())
getwd()
load("../data/kidneyLiver.rda")
dat <- data
dat <- dat[,1:7]
dat[,-1] <- log(dat[,-1]+1)
load("../data/keep1_metrics.rda")
app <- plotLitreApp(data = dat, dataMetrics = metrics, pointColor = '#A020F0')
str(dat)
str(metrics)
??plotLitreApp
rm)list=ls()
load("../data/kidneyLiver.rda")
rm(list=ls())
load("../data/kidneyLiver.rda")
dat <- data
dat <- dat[,1:7]
dat[,-1] <- log(dat[,-1]+1)
ls()
load("../data/keep1_metrics.rda")
ls()
str(metrics)
View(metrics[["K_L"]])
which(dat$ID %in% metrics[["K_L"$ID]])
which(dat$ID %in% metrics[["K_L"]]$ID)
length(which(dat$ID %in% metrics[["K_L"]]$ID))
which(dat$ID !%in% metrics[["K_L"]]$ID)
!which(dat$ID %in% metrics[["K_L"]]$ID)
length(!which(dat$ID %in% metrics[["K_L"]]$ID))
which(!dat$ID %in% metrics[["K_L"]]$ID)
length(which(!dat$ID %in% metrics[["K_L"]]$ID))
dat[which(!dat$ID %in% metrics[["K_L"]]$ID)]$ID
dat[which(!dat$ID %in% metrics[["K_L"]]$ID),]$ID
str(metrics)
addDat <- data.frame(ID = dat[which(!dat$ID %in% metrics[["K_L"]]$ID),]$ID, logFC = 1, logCPM = 1, LR = 1, PValue = 1, FDR = 1)
str(addDat)
addDat <- data.frame(ID = dat[which(!dat$ID %in% metrics[["K_L"]]$ID),]$ID, logFC = 1, logCPM = 1, LR = 1, PValue = 1, FDR = 1)
rbind(metrics[["K_L"]], addDat)
metrics[["K_L"]] <- rbind(metrics[["K_L"]], addDat)
str(metrics)
app <- plotLitreApp(data = dat, dataMetrics = metrics, pointColor = '#A020F0')
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
app <- plotLitreApp(data = dat, dataMetrics = metrics, pointColor = '#A020F0')
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
app <- plotLitreApp(data = dat, dataMetrics = metrics, pointColor = '#A020F0')
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
str(dat)
str(metrics)
??plotLitreApp
rm(list=ls())
data(soybean_ir_sub)
data(soybean_ir_sub_metrics)
soybean_ir_sub_log <- soybean_ir_sub
soybean_ir_sub_log[,-1] <- log(soybean_ir_sub[,-1]+1)
app <- plotLitreApp(data = soybean_ir_sub_log,
dataMetrics = soybean_ir_sub_metrics)
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
rm(list=ls())
data(soybean_ir_sub)
data(soybean_ir_sub_metrics)
soybean_ir_sub_log <- soybean_ir_sub
soybean_ir_sub_log[,-1] <- log(soybean_ir_sub[,-1]+1)
app <- plotLitreApp(data = soybean_ir_sub_log,
dataMetrics = soybean_ir_sub_metrics)
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
data(soybean_ir_sub)
data(soybean_ir_sub_metrics)
soybean_ir_sub_log <- soybean_ir_sub
soybean_ir_sub_log[,-1] <- log(soybean_ir_sub[,-1]+1)
app <- plotLitreApp(data = soybean_ir_sub_log,
dataMetrics = soybean_ir_sub_metrics)
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
